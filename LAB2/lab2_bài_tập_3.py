# -*- coding: utf-8 -*-
"""BÀI TẬP 3 -LAB2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yo5FYDKsUOf-ZEpUM6DJg4b5mZuW4DAr
"""

from PIL import Image
import math
import scipy
import cv2
import numpy as np
import imageio.v2 as iio
import matplotlib.pylab as plt
import random

image = cv2.imread('pagoda.jpg')
b, g, r = cv2.split(image)
image_rgb = cv2.merge([g , r, b])
index = random.randint(0,4)
#INVERSE
if index == 0:
  print("Biến đổi ảnh INVERSE TRASFORMATION")
  img_arr = np.asarray(image_rgb)
  inverse = 255 - img_arr
  result_img =  Image.fromarray(inverse)
#GAMMA
elif index == 1:
  print("Biến đổi ảnh GAMMA TRASFORMATION")
  gamma = float(input("Nhập giá trị cho gamma: "))
  img_arr = np.asarray(image_rgb)
  b1 = img_arr.astype(float)
  b2 = np.max(b1)
  b3 = b1/b2
  b2 = np.log(b3) * gamma

#gamma correction is computed
  c = np.exp(b2) * 255.0
#c1 is converted to type int
  c1 = c.astype(np.uint8)

  result_img = Image.fromarray(c1)

#LOG TRANSFORMATION
elif index == 2:
  print("Biến đổi ảnh LOG TRASFORMATION")
  b1 = image_rgb.astype(float)

  #find maximum value in b1
  b2 = np.max(b1)

  #performing the log transformation
  c = (128.0 * np.log(1 + b1))/np.log(1 + b2)

  #c1 is converted type int
  c1 = c.astype(np.uint8)

  d = c1
  result_img = Image.fromarray(c1)

#HISTOGRAM EQUATILIZATION
elif index == 3:
  print("Biến đổi ảnh HISTOGRAM EQUATILIZATION")
  img_arr = np.asarray(image_rgb)

  #convert 2D ndarray from 1D array
  b1 = img_arr.flatten()

  #histogram and bin are computed
  hist, bins = np.histogram(img_arr, 256, [0,255])

  #cumulative distribution function is computed
  cdf = hist.cumsum()

  #places where cdf = 0 is marked or ignored and
  #rest is stored in cdf_m
  cdf_m = np.ma.masked_equal(cdf,0)
  #histogram equalization is performed
  num_cdf_m = (cdf_m - cdf_m.min()) *255
  den_cdf_m = (cdf.max() - cdf_m.min())
  cdf_m = num_cdf_m/den_cdf_m

  #the masked places in cdf_m are now 0
  cdf = np.ma.filled(cdf_m,0).astype('uint8')

  #cdf values are assigned in the flattened array
  im2 = cdf[b1]

  #im2 is 1D so we use reshape command to
  #make it into 2D
  im3 = np.reshape(im2, img_arr.shape)

  #converting im3 to an image
  result_img = Image.fromarray(im3)
#CONTRAST STRECHING
else:
  print("Biến đổi ảnh #CONTRAST STRECHING")
  img_arr = np.asarray(image_rgb)
  #finding the maximun and minimum pixel values
  b = img_arr.max()
  a = img_arr.min()
  print(a,b)
  #converting img to float
  c = img_arr.astype(float)
  #contrast stretching transformation
  im2 = 255 * (c - a)/(b - a)
  #im2 is converted from ndarray to image
  result_img = Image.fromarray(im2)

# Hiển thị ảnh đã biến đổi
result_img.show()
plt.imshow(result_img)
plt.show()
# Lưu ảnh đã biến đổi
iio.imsave('result_image.jpg',result_img)